package com;

/*Иногда исключения нецелесообразно обрабатывать в том методе, в котором они возникают. В таком случае их следует указывать с помощью ключевого слова throws. Ниже приведена общая форма объявления метода, в котором присутствует ключевое слово throws.

        возвращаемый_тип имя_метода(список_параметров) throws список_исключений {
        // Тело метода
        }
        В списке исключений через запятую указываются исключения, которые может генерировать метод.

        Возможно, вам покажется странным, что в ряде предыдущих примеров ключевое слово throws не указывалось при генерировании исключений за пределами методов. Дело в том, что исключения, генерируемые подклассом Error или RuntimeException, можно и не указывать в списке оператора throws. Исполняющая система Java по умолчанию предполагает, что метод может их генерировать. А исключения всех остальных типов следует непременно объявить с помощью ключевого слова throws. Если этого не сделать, возникнет ошибка при компиляции.

        Пример применения оператора throws уже был представлен ранее в этой книге. Напомним, что при организации ввода с клавиатуры в метод main() потребовалось включить следующее выражение:
        throws java.io.IOException
        Теперь вы знаете, зачем это было нужно. При вводе данных может возникнуть исключение IOException, а на тот момент вы еще не знали, как оно обрабатывается. Поэтому мы и указали, что исключение должно обрабатываться за пределами метода main(). Теперь, ознакомившись с исключениями, вы сможете без труда обработать исключение IOException самостоятельно.

        Рассмотрим пример, в котором осуществляется обработка исключения IOException. В методе prompt() отображается сообщение, а затем выполняется ввод символов с клавиатуры. Такой ввод данных может привести к возникновению исключения IOException. Но это исключение не обрабатывается в методе prompt(). Вместо этого в объявлении метода указан оператор throws, т.е. обязанности по обработке данного исключению поручаются вызывающему методу. В данном случае вызывающим является метод main(), в котором и перехватывается исключение.*/


// Применение ключевого слова throws,
class ThrowsDemo {

    // Обратите внимание на оператор throws в объявлении метода.
    public static char prompt(String str) throws java.io.IOException {
        System.out.print(str + ": ");
        return (char) System.in.read();
    }

    public static void main(String args[]) {
        char ch;
        try {
            // В методе prompt() может быть сгенерировано исключение, поэтому данный метод следует вызывать в блоке try.
            ch = prompt("Enter a letter");

        } catch (java.io.IOException exc) {
            System.out.println("I/O exception occurred.");
            ch = 'X';// todo
            // что такое здесь Х ????

        }
        System.out.println("You pressed " + ch);
    }
}