package com;

/**
 * Created by RUSLAN77 on  17.05.2017 in Ukraine
 */

// Блочное лямбда-выражение, предназначенное для нахождения наименьшего положительного делителя заданного целого числа

interface NumericFunc {
    int func(int n);
}

public class BlockLamЬdaDemo {
    public static void main(String[] args) {
        // Данное блочное лямбда-выражение возвращает наименьший положительный делитель заданного целого числа

        NumericFunc smallestF = (n) -> {
            int result = 1;

            // Get absolute value of n.
            n = n < 0 ? -n : n;
            for (int i = 2; i <= n / i; i++)
                if ((n % i) == 0) {
                    result = i;
                    break;
                }
            return result;
        };
        System.out.println("Haимeньшим делителем 12 является " +
                smallestF.func(12));
        System.out.println("Haимeньшим делителем 11 является " +
                smallestF.func(11));
    }
}
/*Обратите внимание на то, что в данном блочном лямбда-выражении объявляется
переменная result, используется цикл for и осуществляется возврат по инструкции
        return. В лямбда-выражениях блочного типа это вполне допустимо. По сути, блочное
        тело лямбды аналогично телу метода. И еще одно замечание: когда в лямбда-выражении
        встречается инструкция return, она приводит к возврату из лямбда-выражения, но не
        из метода, в котором она содержится.*/