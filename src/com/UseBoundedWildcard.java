package com;

/**
 * Created by RUSLAN77 on  14.02.2017 in Ukraine
 */
//class UseBoundedWildcard {
//    // Здесь знак ? устанавливает соответствие классу А или производным от него подклассам. В объявлении этого метода используется ограниченный
//    // метасимвольный аргумент.
//    static void test(Gen5<? extends A5> o) {
//    }
//
//    public static void main(String args[]) {
//        class A5 {
//            // ...
//        }
//
//        class B5 extends A5 {
//            // ...
//        }
//
//        class C5 extends A5 {
//            // ...
//        }
//
//// Обратите внимание на то, что D не является подклассом А.
//        class D5 {
//            // ...
//        }
//        A5 a = new A5();
//        B5 b = new B5();
//        C5 c = new C5();
//        D5 d = new D5();
//
//        Gen5<A5> w = new Gen5<A5>(a);
//        Gen5<B5> w2 = new Gen5<B5>(b);
//        Gen5<C5> w3 = new Gen5<C5>(c);
//        Gen5<D5> w4 = new Gen5<D5>(d);
//
//        // Эти вызовы метода test() допустимы, так как объекты w, w2 и w3 относятся к подклассам А.
//        test(w);
//        test(w2);
//        test(w3);
//
//        //А этот вызов метода test() недопустим, так как объект не относится к подклассу Л.
//        // test(w4); // Ошибка!
//    }
//}

/*В методе main() создаются объекты классов А, В, С и D. Затем они используются для создания четырех объектов класса Gen (по одному на каждый тип). После этого метод test() вызывается четыре раза, причем последний его вызов закомментирован. Первые три вызова вполне допустимы, поскольку w, w2 и w3 являются объектами класса Gen, типы которых определяются^ классом А или производными от него классами. А последний вызов метода test() недопустим, потому что w4 — это объект класса D, не являющегося производным от к класса А. Следовательно, ограниченный метасимвольный аргумент в методе test() не позволяет передавать ему объект w4 в качестве параметра.

В целом верхняя граница для метасимвольного аргумента задается в следующей общей форме:

<? extends суперкласс >
где после ключевого слова extends указывается суперкласс, т.е. имя класса, определяющего верхнюю границу, включая и его самого. Это означает, что в качестве аргумента допускается указывать не только подклассы данного класса, но и сам этот класс.

По мере необходимости можно также указать нижнюю границу для метасимвольного аргумента. Для этой цели служит ключевое слово super, указываемое в следующей общей форме:

<? extends подкласс >
В данном случае в качестве аргумента допускается использовать только суперклассы, от которых наследует подкласс, исключая его самого. Это означает, что подкласс, определяющий нижнюю границу, не относится к числу классов, передаваемых в качестве аргумента.

В этом случае следующее приведение типов может быть выполнено, поскольку переменная х указывает на экземпляр класса Gen:

(Gen<Integer>) х // Допустимо
А следующее приведение типов не может быть выполнено, поскольку переменная х не указывает на экземпляр класса Gen:

(Gen<Long>) х // Недопустимо*/