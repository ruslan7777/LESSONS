package com;

/* Демонстрация использования ссылок на статические методы.
 * Функциональный интерфейс для числовых предикатов, которые воздействуют на целочисленные значения
 */

interface IntPredicate {
    /*Сначала в программе объявляется функциональный интерфейс IntPredicate, имеющий метод test (). Этот метод принимает параметр типа int и возвращает результат типа boolean. Метод предназначен для проверки того, что
заданное целое число удовлетворяет определенным условиям.*/
    boolean test(int n);
}

// Данный класс определяет три статических метода, которые  проверяют соответствие целого числа определенным условиям
class MyintPredicates {
    // Статический метод, который возвращает true, если заданное число простое
    static boolean isPrime(int n) {
        if (n < 2) return false;
        for (int i = 2; i <= n / i; i++) {
            if ((n % i) == 0)
                return false;
        }
        return true;
    }

    // Статический метод, который возвращает true, если заданное число четное
    static boolean isEven(int n) {
        return (n % 2) == 0;
    }

    // Статический метод, который возвращает true, если
// заданное число положительное
    static boolean isPositive(int n) {
        return n > 0;
    }
}

public class MethodRefDemo {
    // В данном методе типом первого параметра является функциональный интерфейс. Следовательно, ему можно передать
// ссылку на любой экземпляр этого интерфейса, в том числе и на экземпляр, созданный посредством ссылки на метод.
    static boolean numTest(IntPredicate p, int v) {
        return p.test(v);
    }

    public static void main(String[] args) {
        {
            boolean result;
            // Здесь методу numTest() передается ссылка на метод isPrime()
            result = numTest(MyintPredicates::isPrime, 17);//Использование ссылок на статические     методы
            /*методу numTest () в качестве первого аргумента передается ссылка на статический
метод isPrime (). Это можно было сделать, поскольку ссылка isPrime совместима с функциональным интерфейсом IntPredicate. Таким образом, вычисление выражения MyintPredicates: : isPrirne дает ссылку на объект, метод isPrime () которого предоставляет реализацию метода test () интерфейса IntPredicate.
 Остальные два вызова метода numTest () работают аналогичным образом.*/
            if (result) System.out.println("l7 - простое число");

// Здесь методу numTest() передается ссылка на метод isEven()
            result = numTest(MyintPredicates::isEven, 12); //Использование ссылок на статические     методы
            if (result) System.out.println("12 - четное число");

// Здесь методу numTest() передается ссылка на метод isPositive()
            result = numTest(MyintPredicates::isPositive, 11);  //Использование ссылок на статические     методы
            if (result) System.out.println("ll - положительное число");
        }
    }
}
