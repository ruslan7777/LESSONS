package com;

/**
 /*Действия нерекурсивноrо метода factI () не требуют особых пояснений. В нем используется цикл, в котором числа, начиная с 1, последовательно умножаются друг на
 друга, постепенно образуя произведение, дающее факториал.

 Рекурсивный метод factR () действует в соответствии с несколько более сложной схемой. Когда метод factR () вызывается с аргументом, равным 1, он возвращает 1,
 в противном случае - произведение, определяемое из выражения factR (n-1) *n. Для вычисления этого выражения вызывается метод factR () с аргументом n-1.
 Этот процесс повторяется до тех пор, пока значение переменной n не окажется  равным 1, после чего из предыдущих вызовов данного метода начнут возвращаться
 полученные значения. Например,при вычислении факториала 2 первый вызов метода   factR () повлечет за собой второй вызов того же самого метода, но с аргументом 1.
 В результате метод возвратит значение 1, которое затем умножается на 2    (т.е. исходное значение переменной n). В результате всех этих вычислений будет
 получен факториал, равный 2. По желанию в тело метода factR () можно ввести операторы println () , чтобы сообщать, на каком именно уровне
 осуществляется очередной вызов, а также отображать промежуточные  результаты вычислений. Когда метод вызывает самого себя, в системном стеке
 распределяется память для новых локальных переменных и параметров, и код метода  выполняется с этими новыми переменными и параметрами с самого начала.
 При рекурсивном вызове метода не создается его новая копия, но лишь используются его   новые аргументы. А при возврате из каждого рекурсивного вызова
 старые локальные переменные и параметры извлекаются из стека, и выполнение возобновляется   с точки вызова в методе. Рекурсивные методы можно сравнить
 по принципу действия с постепенно сжимающейся и затем распрямляющейся  пружиной.*/

// Простой пример рекурсии

class Factorial {
    // Рекурсивный метод
    int factR(int n) {
        int result;
        if (n == 1) return 1;
        result = factR(n - 1) * n;//Рекурсивный вызов метода factR ()
        System.out.println(result); // Вывод промежуточных значений result
        return result;
    }

    // Вариант программы, вычисляющий факториал итеративным способом
    int factI(int n) {
        int t, result;
        result = 1;
        for (t = 1; t <= n; t++) result *= t;
        return result;

    }
}

public class Recursion {
    public static void main(String[] args) {
        Factorial f = new Factorial();
        System.out.println("Bычиcлeниe рекурсивным методом");
        System.out.println("Фaктopиaл З равен " + f.factR(3));
        System.out.println("Фaктopиaл 4 равен " + f.factR(4));
        System.out.println("Фaктopиaл 5 равен " + f.factR(5));
        System.out.println();
        System.out.println("Bычиcлeниe итеративным методом");
        System.out.println("Фaктopиaл З равен " + f.factI(3));
        System.out.println("Фaктopиaл 4 равен " + f.factI(4));
        System.out.println("Фaктopиaл 5 равен " + f.factI(5));
    }
}

