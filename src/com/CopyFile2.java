package com;

/**
 * Created by RUSLAN77 on  11.01.2017 in Ukraine
 * В этой версии программы CopyFile используется оператор try с ресурсами. В ней демонстрируется управление двумя ресурсами (в данном случае — файлами) с помощью единственного оператора try.
 */

import java.io.*;

class CopyFile2 {
    public static void main(String args[]) throws IOException {
        int i;
//        // Прежде всего следует убедиться, что оба файла были указаны,
//        if (args.length != 2) {
//            System.out.println("Usage: CopyFile from to");
//            return;
//        }

// открыть оба файла для управления с помощью оператора try
        try (FileInputStream fin = new FileInputStream("C://LESSONS//out//production//LESSONS//com//TEST11.txt");
             FileOutputStream fout = new FileOutputStream("C://LESSONS//out//production//LESSONS//com//TEST22.txt"))

        // Управление двумя ресурсами (в данном случае — файлами).
        {
            do {
                i = fin.read();
                if (i != -1) fout.write(i);
            } while (i != -1);
        } catch (IOException exc) {
            System.out.println("I/O Error: " + exc);
        }
    }
}
/*Обратите внимание на то, каким образом входной и выходной файлы открываются в операторе try с ресурсами, как показано ниже.

try (FilelnputStream fin = new FilelnputStream(args[0]);
     FileOutputStream fout = new FileOutputStream(args[1]))
{
По завершении этого блока try оба файла, на которые ссылаются переменные fin и fout, закрываются автоматически. Если сравнить эту версию программы с предыдущей, то можно заметить, что ее исходный код намного компактнее. Возможность писать более компактный код является еще одним, дополнительным преимуществом оператора try с ресурсами.

Следует также упомянуть о еще одной особенности оператора try с ресурсами. Вообще говоря, когда выполняется блок try, в нем может возникнуть одно исключение,
приводящее к другому исключению при закрытии ресурса в блоке finally. И если это блок обычного оператора try, то исходное исключение теряется, прерываясь вторым
 исключением. А в блоке оператора try с ресурсами второе исключение подавляется. Но оно не теряется, а добавляется в список подавленных исключений, связанных с
  первым исключением. Этот список можно получить, вызвав метод get Suppressed(), определенный в классе Throwable.*/