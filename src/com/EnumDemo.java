package com;

/*Для создания перечисления служит ключевое слово enum. Ниже приведен пример простого перечисления разных видов транспортных средств.

// Перечисление видов транспортных средств,
enum Transport {
    CAR, TRUCK, AIRPLANE, TRAIN, BOAT
}
    Идентификаторы CAR, TRUCK и так далее называются константами перечислимого типа. Каждый из них автоматически неявно объявляется как открытый (public), статический (static) член перечисления Transport. Тип этих констант соответствует типу перечисления (в данном случае — Transport). В терминологии Java подобные константы называются самотипизированными (приставка “само” означает, что в качестве типа константы принимается тип перечисления).

        Определив перечисление, можно создать переменную данного типа. Но, несмотря на то, что перечисление определяется как тип класса, получить экземпляр объекта типа enum с помощью оператора new нельзя. Переменная перечислимого типа создается подобно переменной простого типа. Например, для объявления переменной tp упомянутого выше перечислимого типа Transport служит следующее выражение:

        Transport tp;
        Переменная tp относится к типу Transport, и поэтому ей можно присваивать только те значения, которые определены в данном перечислении. Например, в следующей строке кода переменной tp присваивается значение AIRPLANE:

        tp = Transport.AIRPLANE;
        Обратите внимание на то, что идентификатор AIRPLANE полностью определяется как относящийся к типу Transport.

        Для проверки равенства констант перечислимого типа служит оператор сравнения =. Например, в приведенной ниже строке кода содержимое переменной tp сравнивается с константой TRAIN,

        if(tp == Transport.TRAIN) // ...
        Перечислимые значения можно также использовать в операторе switch. Очевидно, что в ветвях case этого оператора могут присутствовать только константы того же самого перечислимого типа, что и в выражении switch. Например, следующий фрагмент кода составлен правильно:

// Применение перечисления для управления оператором switch,
        switch(tp) {
        case CAR:
        // ...
        case TRUCK:
        // ...
        Как видите, в ветвях case используются константы без полного определения имени типа. Например, вместо Transport. TRUCK указано просто TRUCK. Это допустимо потому, что перечислимый тип в выражении switch неявно определяет тип констант в ветвях case. Более того, если попытаться указать тип константы явно, при компиляции возникнет ошибка.

        При отображении константы перечислимого типа, например, с помощью метода println(), выводится ее имя. Так, в результате выполнения следующего оператора отобразится имя BOAT:

        System.out.println(Transport.BOAT);
        Ниже приведен пример программы, демонстрирующий все особенности применения перечисления Transport.*/

// Особенности применения перечисления Transport. Объявление перечисления.
enum Transport {
    CAR, TRUCK, AIRPLANE, TRAIN, BOAT
}
class EnumDemo {
    public static void main(String args[])
    {
        // Объявление ссылки на перечисление Transport.
        Transport tp;

        // Присваивание переменной tp константы AIRPLANE.
        tp = Transport.AIRPLANE;

        // вывести перечислимое значение
        System.out.println("Value of tp: " + tp) ;
        System.out.println();

        // Присваивание переменной tp константы TRAIN.
        tp = Transport.TRAIN;

        // Проверка равенства двух объектов типа Transport.
        if(tp == Transport.TRAIN) // сравнить два перечислимых значения
            System.out.println("tp contains TRAIN.\n");

        // Использование перечисления для управления оператором switch.
        switch(tp) {
            case CAR:
                System.out.println("A car carries people.");
                break;
            case TRUCK:
                System.out.println("A truck carries freight.");
                break;
            case AIRPLANE:
                System.out.println("An airplane flies.");
                break;
            case TRAIN:
                System.out.println("A train runs on rails.");
                break;
            case BOAT:
                System.out.println("A boat sails on water.");
                break;
        }
    }
}