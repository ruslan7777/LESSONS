package com;

/*Один интерфейс может наследовать другой интерфейс, для чего служит ключевое слово extends. Синтаксис наследования интерфейсов ничем не отличается от того, что употребляется для наследования классов. Если класс реализует один интерфейс, наследующий другой интерфейс, в нем следует определить все методы, объявленные в интерфейсах по всей цепочке наследования. Ниже приведен пример, демонстрирующий наследование интерфейсов.
*/

// Наследование интерфейсов
interface А {
    void methl() ;
    void meth2();
}

// Интерфейс В содержит методы methl() и meth2(), а кроме того, в него добавляется метод meth3().
interface В extends А { // Интерфейс В наследует интерфейс А.
    void meth3();
}

// Этот класс должен реализовать все методы, объявленные в интерфейсах А и В.
class MyClass5 implements В {
    public void methl() {
        System.out.println("Implement methl().");
    }

    public void meth2() {
        System.out.println("Implement meth2().");
    }

    public void meth3() {
        System.out.println("Implement meth3() .") ;
    }
}

class IFExtend {
    public static void main(String arg[]) {
        MyClass5 ob = new MyClass5();

        ob.methl();
        ob.meth2() ;
        ob.meth3() ;
    }
}
/*В качестве эксперимента можно попробовать удалить из класса MyClass реализацию метода methl(). Это приведет к ошибке при компиляции. Как упоминалось выше, в каждом классе, реализующем интерфейс, должны быть определены все методы, объявленные в интерфейсе, в том числе те, которые были унаследованы от других интерфейсов.*/