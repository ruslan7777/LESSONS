package com;

//// Реализация интерфейса MyIF
//class MyIFimp implements MyIF {
//    // Реализации подлежит лишь метод getUserID() интерфейса MyIF.Делать это для метода getAdminID() необязательно, поскольку
//    // при необходимости может быть использована его реализация, заданная по умолчанию.
//    public int getUserID() {
//        return 100;
//    }
//}


// Использование интерфейсного метода по умолчанию
class DefaultMethodDemo {
    public static void main(String args[]) {
        MyIFimp2 obj = new MyIFimp2();
// Вызов метода getUserID() возможен, поскольку он явно реализован классом MyIFimp
        System.out.println("Идeнтификaтop пользователя " + obj.getUserID());

// Вызов метода getAdminID() также возможен, поскольку предоставляется его реализация по умолчанию
        System.out.println("Идeнтификaтop администратора: " + obj.getAdminID());


    }
}
/*Как видите, программа автоматически использовала реализацию метода getAdminID (), заданную по умолчанию. Классу MyIFimp необязательно было реализовывать
данный метод. Таким образом, реализация метода getAdminID () является опциональной. (Разумеется, если класс должен возвращать другое значение идентификатора,
собственная реализация метода станет необходимой.)*/


   /* Класс вполне может - и эта практика является общеупотребительной - определить    собственную реализацию метода, определенного по умолчанию в интерфейсе.
    В качестве  примера рассмотрим приведенный ниже класс MyIFimp2, переопределяющий метод     getAdminID ()*/

class MyIFimp2 implements MyIF {
    // Предоставляются реализации обоих методов  getUserID() и getAdminID()
    public int getUserID() {
        return 100;
    }

    public int getAdminID() {
        return 42;
    }



 }
//Теперь при вызове метода getAdminID () будет возвращено значение, отличное от  того, которое задано по умолчанию.