package com;

/**
 * Created by RUSLAN77 on  08.12.2016 in Ukraine
 * Вспомним очень важный принцип: ссылочная переменная суперкласса может  ссылаться на объект подкласса. В Java этот принцип используется для вызова переопределяемых методов во время выполнения. Если вызов переопределенного метода осуществляется с использованием ссылки на суперкласс, то исполняющая система Java
 выбирает нужную версию метода на основании типа объекта, на который эта ссылка указывает в момент вызова. Ссылкам на различные типы объектов будут соответствовать
 вызовы различных версий переопределенного метода. Иными словами, во время выполнения версия переопределенного метода выбирается в зависимости от типа обьекта
 ссылки (а не типа ссылочной переменной). Следовательно, если суперкласс содержит метод, переопределенный в подклассе, будет вызываться метод, соответствующий тому
 объекту, на который указывает ссылочная переменная суперкласса. Ниже приведен простой пример, демонстрирующий использование динамической
 диспетчеризации вызовов методов.
 */
// Демонстрация динамической диспетчеризации методов
class Sup {
    void who() {
        System.out.println("who() в Sup");
    }
}
        class Sub1 extends Sup {
            void who() {
                System.out.println("who() в Sub1");
            }
        }
                class Sub2 extends Sup {
                    void who() {
                        System.out.println("who() в Sub2");
                    }
                }

                        class DynDispDemo {
                            public  static void main(String args[]) {
                                Sup superOb= new Sup();
                                Sub1 subOb1= new Sub1();
                                Sub2 subOb2= new Sub2();

                                Sup supRef;

//В каждом из этих вызовов выбор версии метода who ( ) осуществляется по типу объекта,на который указывает ссылка во время выполнения
                                supRef = superOb;
                                supRef.who();

                                supRef = subOb1;
                                supRef.who();

                                supRef = subOb2;
                                supRef.who();
                            }
                        }

    /*В данном примере программы определяются суперкласс Sup и два ero подкласса Sub1 и Sub2. В классе Sup объявляется метод who (), переопределяемый в подклассах.
В методе main () создаются объекты типа Sup, Sub1 и Sub2. Там же объявляется переменная supRef, ссылающаяся на объект типа Sup.
 Затем переменной supRef в методе main () поочередно присваиваются ссылки на объекты разного типа, и далее эти ссылки используются для вызова метода who () .
 Как следует из результата выполнения данной программы, вызываемая версия метода who () определяется типом объекта, на который указывает переменная supRef в момент вызова, а не типом самой переменной при создании этой переменной.*/