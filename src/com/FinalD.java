package com;

/**
 * Created by RUSLAN77 on  09.12.2016 in Ukraine
 * главе 6 был рассмотрен простой класс ErrorMsg для обработки ошибок. В нем устанавливается соответствие между кодами ошибок и строками сообщений об ошибках.
 * Ниже приведен усовершенствованный вариант этого класса, в котором для создания именованных констант применяется модификатор final. Теперь, вместо того чтобы
 * передавать методу getErrorMsg () числовое значение, например 2, достаточно указать при его вызове именованную целочисленную константу DISКERR.
 * Обратите внимание на то, как используются константы в методе main (). Они ямяются членами класса ErrorMsg, и поэтому для доступа к ним требуется ссылка на объект
 этого класса. Разумеется, константы могут быть унаследованы подклассами и непосредственно доступными в них.
 Многие программисты используют имена констант типа final, состоящие полностью из прописных букв, как это сделано в предыдущем примере.  Если есть несколько слов, то подчеркинванием отделются OUTER_VAR

 */
// Возврат объекта типа String
class ErrorMsg2 {
    // Коды ошибок. Константы объявляются с помощью ключевого слова final
    final  int OUTERR = 0;
    final  int INERR = 1;
    final int DISKERR = 2;
    final  int INDEXERR = 3;
    String msgs[] = {
            "Ошибка вывода",
            "Ошибка ввода",
            "Отсутствует место на диске",
            "Выход индекса за границы диапазона"
    };

    String getErrorMsg(int i) {
        if (i >= 0 & i < msgs.length)
            return msgs[i];
        else
            return "Несуществующий код ошибки";
    }
}

public class FinalD {
    public static void main(String[] args) {
        ErrorMsg2 err = new ErrorMsg2();

        // При вызове метода используются константы, объявленные с помощью ключевого слова final
        System.out.println(err.getErrorMsg(err.OUTERR));
        System.out.println(err.getErrorMsg(err.DISKERR));
    }
}


/*Так, если при объямении констант в классе ErrorMsg указать ключевое слово static, вызов метода
println () в методе main () может приобрести следующий вид (то есть объявив константу таким образом, вы можете обращаться к
ней по имени класса, не создавая конкретных объектов):
       System.out.println(err.getErrorMsg(ErrorMsg2.OUTERR));
       System.out.println(err.getErrorMsg(ErrorMsg2.DISKERR));*/