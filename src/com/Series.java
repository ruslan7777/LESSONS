package com;

/**
 * Created by RUSLAN77 on  10.12.2016 in Ukraine
 * <p>
 * Переменные, объявленные в интерфейсе, не являются переменными экземпляра. Они неявно обозначаются ключевыми словами puЫic, final и static и обязательно
 * подлежат инициализации. По сути, они являются константами. Ниже приведен пример определения интерфейса. Предполагается, что этот интерфейс должен быть реализован
 * в классе, где формируется последовательный ряд числовых значений.
 */

//public interface Series {
//    int getNext(); // возвратить следующее по порядку число
//
//    void reset(); // начать все с самого сначала
//
//    void setStart(int х); // задать начальное значение
//}
//
///*Этот интерфейс объявляется открытым (puЬlic), а следовательно, он может быть реализован в Классе, принадлежащем любому пакету.*/




// Усовершенствованная версия интерфейса Series, которая включает используемый по умолчанию метод getNextArray()
public interface Series {
    int getNext(); // вернуть следующее число в ряду

    // Возвратить массив, который содержит n элементов, располагающихся в ряду вслед за текущим элементом
    default int[] getNextArray(int n) {  //todo
                                        // как правильно описать словами эту запись?
        int[] vals = new int[n];

        for (int i = 0; i < n; i++) vals[i] = getNext();
        return vals;
    }

    void reset(); // сброс

    void setStart(int х); // установка начального значения
}

/*Иногда при добавлении в существующий интерфейс метода, используемого по умолчанию,в его реализации предусматривают всего лишь вывод сообщения об ошибке. Такой
подход требуется использовать тогда, когда для метода по умолчанию невозможно предоставить реализацию, одинаково пригодную для всех возможных случаев его использования.По существу, код подобных методов может быть произвольным. Но иногда удается определить метод по умолчанию, который будет способен выполнять полезные
функции в любом случае. Именно таким является наш метод getNextArray (). Поскольку интерфейс Series уже содержит требование, чтобы класс реализовал метод
getNext (), версия по умолчанию getNextArray () может использовать его. Таким образом, можно предложить следующий способ реализации новой версии интерфейса
Series, которая включает используемый по умолчанию метод getNextArray ().

Обратите внимание на то, как реализован метод getNextArray (). Поскольку метод getNext () являлся частью первоначальной спецификации интерфейса Series, он должен предоставляться любым классом, реализующим данный интерфейс. Следовательно, метод getNextArray () может использовать его для получения следующих n элементов ряда.
 В результате любой класс, реализующий усовершенствованную версию интерфейса Series, сможет использовать метод getNextArray () в том виде, как он есть, без какой-
либо необходимости переопределять его. Поэтому работоспособность кода не будет нарушена. Разумеется, класс всегда может предоставить собственную реализацию метода
getNextArray (), если это окажется необходимым.

Как показывает предыдущий пример, двумя главными преимушествами использования методов по умолчанию являются следующие:
-? это позволяет обновлять интерфейсы, не нарушая при этом работоспособности существующего кода;
- это дает возможность предоставлять дополнительную функциональность и при этом не требовать реализации "заглушек" классами, которым эта функциональность не нужна.*/
