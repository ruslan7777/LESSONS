package com;

/*Помимо списка параметров переменной длины, в объявлении метода могут указываться и обычные параметры, но при одном условии: массив параметров переменной
длины должен быть указан последним.
Например, приведенное ниже объявление метода является вполне допустимым.
        int doit(int а, int Ь, douЫe с, int ... vals) {

 Ниже приведен переработанный вариант метода vaTest () , в котором метод получает как обычные аргументы, так и массив аргументов переменной длины.
 Помните о том, что список параметров переменной длины должен указываться последним.Например, следующее объявление метода недопустимо.
int doit(int а, int Ь, douЫe с, int ... vals,
boolean stopFlag) { // Ошибка!
В данном примере сделана попытка указать обычный параметр после списка параметровпеременной длины.

Существует еще одно ограничение, которое следует соблюдать: список параметровпеременной длины можно указать в методе только один раз. Например, приведенное
ниже объявление метода недопустимо.
int do!t(int а, int Ь, douЫe с, int ... vals,
douЫe ... morevals) { // Ошибка!
Ошибкой в данном случае является попытка указать два разных списка параметровпеременной длины.
 */

//Использование массива аргументов переменной длины наряду с обычными аргументами
public class VarArgs2 {

    // Здесь msg - обычный параметр, v - массив параметров переменной длины

    static void vaTest(String msg, int... v) {
        System.out.println(msg + v.length);
        System.out.println("Coдepжимoe: ");

        for (int i = 0; i < v.length; i++)
            System.out.println(" arg  " + i + " - " + v[i]);

        System.out.println();
    }

    public static void main(String[] args) {
        {
            vaTest("Один аргумент в массиве: ", 10);
            vaTest("Tpи аргумента в массиве: ", 1, 2, 3);
            vaTest("Отсутствуют аргументы в виде массива:");
        }
    }
}

