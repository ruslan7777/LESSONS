package com;

/**
 * Лямбда-выражения можно использовать в любом контексте, предоставляющем целевой тип. В предыдущих
 * примерах использовались целевые контексты присваивания и инициализации. Примером
 * контекста другого типа может служить передача лямбда-выражения методу в качестве
 * аргумента. В действительности именно этот контекст является обычным способом
 * использования лямбда-выражений, значительно усиливающим выразительность языка
 * Java.
 * Проиллюстрируем этот процесс на примере проекта, в котором создаются три строковые
 * функции, с помощью которых выполняются следующие операции: обращение
 * строки, обращение регистра букв в пределах строки и замена пробелов дефисами.
 * В проекте эти функции реализуются в виде лямбда-выражений функционального интерфейса
 * StringFunc. Каждая из функций поочередно передается методу changeStr ()
 * в качестве первого аргумента. Метод changeStr () применяет полученную строковую
 * функцию к строке, которая задается вторым аргументом, и возвращает результат. Такой
 * подход обеспечивает возможность применения целого ряда различных строковых функций
 * посредством единственного метода changeStr ()
 */

// Использование лямбда-выражения в качестве аргумента метода
interface StringFunc {
    String func(String str);
    //Данный функциональный интерфейс определяет метод func () , который принимает аргумент типа   String и возвращает результат типа String.
    // Таким образом, метод func () может    воздействовать на строку и возвращать результат.
}

class LamЬdaArgumentDemo {
    // В данном методе типом первого параметра является функциональный интерфейс. Это позволяет передать методу ссылку
// на любой экземпляр данного интерфейса, в том числе на экземпляр, созданный посредством лямбда-выражения. С помощью второго
// параметра (s) задается строка, подлежащая обработке.
    static String changeStr(StringFunc sf, String s) {
        return sf.func(s);
    }

    public static void main(String args[]) {
        String inStr = "Лямбда-выражения расширяют Java";
        String outStr;
        System.out.println("Bxoднaя строка: " + inStr);
        //Здесь inStr - ссылка на строку, подлежащую обработке, а outStr получает измененную  строку.


// Определите лямбда-выражение, располагающее содержимое строки в обратном порядке, и присвойте его переменной,
// ссылающейся на экземпляр StringFunc.
        StringFunc reverse = (str) -> {
            String result = "";

            for (int i = str.length() - 1; i >= 0; i--)
                result += str.charAt(i);
            return result;
        };

        // Передайте reverse методу changeStr{) в качестве первого аргумента. Передайте входную строку в качестве второго аргумента.
        outStr = changeStr(reverse, inStr);
        System.out.println(" Oбpaщeннaя строка: " + outStr);

// Данное лямбда-выражение заменяет пробелы дефисами. Оно внедряется непосредственно в вызов метода changeStr{).
        outStr = changeStr((str) -> str.replace(' ', '-'), inStr);
        System.out.println(" Cтpoкa с замененными пробелами: " + outStr);

// Данное блочное лямбда-выражение обращает регистр букв в строке. Оно также внедряется непосредственно в вызов метода changeStr{).
        outStr = changeStr((str) -> {
            String result = " ";
            char ch;
            for (int i = 0; i < str.length(); i++) {
                ch = str.charAt(i);
                if (Character.isUpperCase(ch))
                    result += Character.toLowerCase(ch);
                else
                    result += Character.toUpperCase(ch);
            }
            return result;
        }, inStr);
        System.out.println("Cтpoкa с обращенным регистром букв: " + outStr);
    }
}

/* Здесь тажке используются статические методы isUpperCase (), toUpperCase () и toLowerCase (), определенные в классе
Character. Вспомните, что класс Character служит оболочкой для типа char.
Метод isUpperCase () возвращает значение true, если переданный ему аргумент представляет собой букву в верхнем регистре, и значение false в противном
случае. Методы toUpperCase () и toLowerCase () устанавливают для букв соответственно верхний и нижний регистры и возврашают результат.

Также исп. метод replace(), который возвращает новую строку, в результате, заменив все вхождения oldChar в данной строке newChar, другими словами - метод позволяет заменить символ в строке*/