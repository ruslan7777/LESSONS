package com;

/**
 * Если конструкторы объявлены как в подклассе, так и в суперклассе, то дело несколько усложняется, поскольку должны быть выполнены оба конструктора. В этом случае на помощь приходит ключевое слово super, которое может применяться в двух общих формах. Первая форма используется для вызова конструктора суперкласса,
 * а вторая - для доступа к членам суперкласса, скрытых членами подкласса. Рассмотрим первое из указанных применений ключевого слова super.
 *
 * Для вызова конструктора суперкласса из подкласса используется следующая общая форма ключевого слова super:
 * super (список_ параметров) ;
 * где список_ параметров определяет параметры, требуемые конструктором суперкласса.
 * <p>
 * Вызов конструктора super () всегда должен быть первым оператором в теле конструктора  подкласса. Проиллюстрируем использование вызова super () на примере
 * приведенной  ниже программы, включающей видоизмененную версию класса TwoDShape, в которой определен конструктор, инициализирующий переменные экземпляра width
 * и height.
 *
 * В конструкторе Triangle присутствует вызов конструктора super () с параметрами
 w и h. В результате управление получает конструктор TwoDShape ( ) , инициализирующий
 переменные width и height этими значениями. Теперь класс Triangle не должен самостоятельно
 инициализировать элементы суперкласса. Ему остается инициализировать
 только собственную переменную экземпляра style. Конструктору TwoDShape () предоставляется
 возможность построить соответствующий подобъект так, как требуется для
 данного класса. Более того, в суперклассе TwoDShape можно реализовать функции, о
 которых подклассам ничего не будет известно. Благодаря этой мере повышается отказоустойчивость
 кода.
 */

// Добавление конструкторов в класс TwoDShape. Первая форма super, которая используется для вызова конструктора суперкласса.

// Класс, описывающий двумерные объекты
class TwoDShape4 {
    private double width;
    private double height;

    // Параметризированный конструктор
    TwoDShape4(double w, double h) {           //Конструктор класса TwoDShape
        width = w;
        height = h;
    }


    // Методы доступа к закрытым переменным  экземпляра width и height
    double getWidth() {
        return width;
    }

    double getHeight() {
        return height;
    }

    void setWidth(double w) {
        width = w;
    }

    void setHeight(double h) {
        height = h;
    }

    void showDim() {
        System.out.println("Ширина и высота- " + width + " " + height);
    }
}

// Подкласс для представления треугольников, производный от класса TwoDShape
class Triangle4 extends TwoDShape4 {   //Класс Triangle наследует класс TwoDShape
    private String style;

    // Конструктор класса Triangle инициализирует как собственное поле style, так  и унаследованные члены класса TwoDClass
    Triangle4(String s, double w, double h) {
        super(w,h);//Использование оператора super() для  вызова конструктора класса TwoDShape
        setWidth(w);
        setHeight(h);  //Иннициализация части объекта, соответствующей классу TwoDShape

        style = s;
    }

    double area() {
        return getWidth() * getHeight() / 2;
    }

    void showStyle() {
        System.out.println("Треугольник " + style);
    }
}

class Shapes4 {
    public static void main(String[] args) {
        Triangle4 t1 = new Triangle4("закрашенный", 4.0, 8.0);
        Triangle4 t2 = new Triangle4("контурный", 8.0, 12.0);

        //Объектам типа Triangle доступны все члены класса Triangle, даже те, которые унаследованы от класса TwoDShape
        System.out.println("Information about t1:");
        t1.showStyle();
        t1.showDim();
        System.out.println("Area " + t1.area());

        System.out.println();

        System.out.println("Information about t2:");
        t2.showStyle();
        t2.showDim();
        System.out.println("Area " + t2.area());
    }
}


