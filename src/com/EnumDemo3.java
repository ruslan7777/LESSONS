package com;

/**
 * Created by RUSLAN77 on  27.01.2017 in Ukraine
 * Конструкторы, методы, переменные экземпляра и перечисления
 * <p>
 * Следует иметь в виду, что каждая константа перечислимого типа является объектом этого же типа, а следовательно, в перечислении можно определить конструкторы, ввести методы и объявить переменные экземпляра. Если определить для объекта перечислимого типа enum конструктор, он будет вызываться при создании каждой константы этого типа. А каждая константа перечислимого типа позволяет вызвать любой метод, определенный в перечислении. И у каждой константы перечислимого типа имеется собственная копия любой переменной экземпляра, определенной в перечислении. Ниже приведен пример с новой версией перечисления Transport, демонстрирующий применение конструктора, переменной экземпляра и метода. Благодаря им появляется возможность определить обычную скорость передвижения различных транспортных средств.
 */

// Применение конструктора, переменной экземпляра и метода в перечислении
enum Transport3 {
    // Обратите внимание на инициализирующие значения констант.
    CAR(65), TRUCK(55), AIRPLANE(600), TRAIN(70), BOAT(22);

    // Объявление переменной экземпляра.
    private int speed; // обычная скорость каждого транспортного средства

    // Объявление конструктора.
    Transport3(int s) {
        speed = s;
    }

    // Определение метода.
    int getSpeed() {
        return speed;
    }
}

class EnumDemo3 {
    public static void main(String args[]) {
        Transport3 tp;  // todo
        // и без этой строки всё работает?

        // отобразить скорость самолета
        // Скорость определяется с помощью метода getSpeed().
        System.out.println("Typical speed for an airplane is " + Transport3.AIRPLANE.getSpeed() + " miles per hour.\n");

        // отобразить все виды транспорта и скорости их передвижения
        System.out.println("All Transport3 speeds: ");
        for (Transport3 t : Transport3.values())
            System.out.println(t + " typical speed is " + t.getSpeed() + " miles per hour.");
    }
}
/*В эту версию перечисления Transport внесен ряд дополнений. Во-первых, появилась переменная экземпляра speed, используемая для хранения скорости передвижения каждого вида транспортных средств. Во-вторых, в перечисление Transport добавлен конструктор, которому передается значение скорости. И в-третьих, в это перечисление добавлен метод getSpeed() , возвращающий значение переменной speed, т.е. скорость передвижения конкретного транспортного средства.

Когда переменная tp объявляется в методе main(), конструктор Transport() автоматически вызывается для каждой указанной константы. Аргументы, передаваемые конструктору, указываются в скобках после имени константы, как показано ниже.

CAR(65), TRUCK(55), AIRPLANE(600), TRAIN(70), BOAT(22);
Числовые значения, передаваемые конструктору Transport() в качестве параметра s, присваиваются переменной speed. Обратите также внимание на то, что список констант перечислимого типа завершается точкой с запятой. Последней в этом списке указана константа BOAT. Точка с запятой требуется в том случае, если, помимо констант, в перечислении присутствуют и другие члены.

У каждой константы перечислимого типа имеется собственная копия переменной speed, что дает возможность выяснить скорость передвижения конкретного транспортного средства, вызвав метод getSpeed(). Например, в методе main() скорость самолета определяется при следующем вызове:

Transport.AIRPLANE.getSpeed()
Скорость каждого транспортного средства определяется путем перебора констант перечислимого типа в цикле for. А поскольку у каждой такой константы имеется своя копия переменной speed, то значения скорости, связанные с разными константами, отличаются друг от друга. Это довольно эффективный принцип организации перечислений, но он возможен только в том случае, если перечисления реализованы в виде классов, как это сделано в Java.

В предыдущем примере использовался только один конструктор, но перечисления, как и обычные классы, допускают любое число конструкторов.

Два важных ограничения
На перечисления накладываются два ограничения.
Во-первых, перечисление не может быть подклассом другого класса.
И во-вторых, перечисление не может выступать в роли суперкласса. Иными словами, перечислимый тип enum нельзя расширять. Если бы это было не так, перечисления действовали бы как обычные классы. Основной же особенностью перечислений является создание констант в виде объектов того класса, в котором они были объявлены.*/
