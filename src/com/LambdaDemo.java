package com;

/**
 * Created by RUSLAN77 on  09.05.2017 in Ukraine // Демонстрация двух простых лямбда-выражений.
 */

// Функциональный интерфейс
interface MyValue {
    double getValue();
}

// Ещё один функциональный интерфейс
interface MyParamValue {
    double getValue(double v);
}

public class LambdaDemo {
    public static void main(String[] args) {
        MyValue myVal; // объявление ссылки на интерфейс

        // Здесь лямбда-выражение - это просто константа. При его назначении переменной myVal создается экземпляр класса, в котором лямбда-выражение
        // реализует метод getValue() интерфейса MyValue.
        myVal = () -> 98.6;  // Простое лямбда- выражение

        // Вызвать метод getValue(), предоставляемый ранее назначенным лямбда-выражением.
        System.out.println("Пocтoяннoe значение: " + myVal.getValue());

        // Создать параметризованное лямбда-выражение и назначить его ссылке на экземпляр MyParamValue. Это лямбда-выражение
        // возвращает обратную величину своего аргумента.
        MyParamValue myPval = (n) -> 1.0 / n;  //Лямбда-выражение,имеющее nараметр


        // Вызвать метод getValue(v) посредством ссылки myPval.
        System.out.println("Oбpaтнaя величина 4 равна " + myPval.getValue(4.0));
        System.out.println("Oбpaтнaя величина 8 равна " + myPval.getValue(8.0));

// лямбда-выражение должно быть совместимым с методом, который определяется функциональным интерфейсом. Поэтому
// приведенные ниже два фрагмента кода не будут работать.

// myVal = () -> "three"; // Ошибка! Тип String несовместим с типом douЬle!

// myPval = () -> Math.random(); // Ошибка! Требуется параметр!

    }
}
